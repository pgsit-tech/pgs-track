/**
 * QR Code Generator - 实用版本
 * 使用真正的QR码生成算法
 */

// QR码生成器
window.QRCode = {
    toCanvas: function(canvas, text, options, callback) {
        try {
            // 如果canvas是字符串ID，获取元素
            if (typeof canvas === 'string') {
                canvas = document.getElementById(canvas);
            }

            // 如果canvas是容器div，先尝试使用在线API
            if (canvas && canvas.tagName !== 'CANVAS') {
                this.generateWithAPI(canvas, text, options, callback);
                return;
            }

            if (!canvas) {
                throw new Error('Canvas element not found');
            }

            // 生成本地QR码
            const qrData = this.generateQRCode(text);
            this.renderQRCode(canvas, qrData, options);

            if (callback) {
                callback(null);
            }

        } catch (error) {
            console.error('QR Code generation error:', error);

            // 降级方案：显示文本链接
            this.showFallbackText(canvas, text);

            if (callback) {
                callback(error);
            }
        }
    },

    generateWithAPI: function(container, text, options, callback) {
        const size = options?.width || 200;

        // 方案1: 使用Google Charts API
        const googleUrl = `https://chart.googleapis.com/chart?chs=${size}x${size}&cht=qr&chl=${encodeURIComponent(text)}`;

        // 方案2: 使用qr-server.com API
        const qrServerUrl = `https://api.qrserver.com/v1/create-qr-code/?size=${size}x${size}&data=${encodeURIComponent(text)}`;

        // 创建图片元素
        const img = document.createElement('img');
        img.style.width = size + 'px';
        img.style.height = size + 'px';
        img.style.border = '1px solid #e5e7eb';
        img.style.borderRadius = '8px';
        img.style.display = 'block';
        img.style.margin = '0 auto';

        let apiIndex = 0;
        const apis = [googleUrl, qrServerUrl];

        const tryNextAPI = () => {
            if (apiIndex >= apis.length) {
                // 所有API都失败，使用本地生成
                console.log('所有在线API失败，使用本地生成');
                this.generateLocalQR(container, text, options, callback);
                return;
            }

            const currentUrl = apis[apiIndex];
            console.log(`尝试API ${apiIndex + 1}: ${currentUrl.split('?')[0]}`);

            img.onload = () => {
                console.log(`API ${apiIndex + 1} 成功`);
                container.innerHTML = '';
                container.appendChild(img);

                // 添加说明文字
                const caption = document.createElement('p');
                caption.textContent = '使用Google Authenticator扫描';
                caption.style.textAlign = 'center';
                caption.style.margin = '10px 0 0 0';
                caption.style.fontSize = '14px';
                caption.style.color = '#6b7280';
                container.appendChild(caption);

                if (callback) callback(null);
            };

            img.onerror = () => {
                console.log(`API ${apiIndex + 1} 失败`);
                apiIndex++;
                setTimeout(tryNextAPI, 500);
            };

            img.src = currentUrl;

            // 5秒超时
            setTimeout(() => {
                if (!img.complete) {
                    console.log(`API ${apiIndex + 1} 超时`);
                    apiIndex++;
                    tryNextAPI();
                }
            }, 5000);
        };

        tryNextAPI();
    },

    generateLocalQR: function(container, text, options, callback) {
        console.log('使用本地QR码生成');

        const canvas = document.createElement('canvas');
        const size = options?.width || 200;
        canvas.width = size;
        canvas.height = size;
        canvas.style.border = '1px solid #e5e7eb';
        canvas.style.borderRadius = '8px';
        canvas.style.display = 'block';
        canvas.style.margin = '0 auto';

        try {
            const qrData = this.generateQRCode(text);
            this.renderQRCode(canvas, qrData, options);

            container.innerHTML = '';
            container.appendChild(canvas);

            // 添加说明文字
            const caption = document.createElement('p');
            caption.textContent = '本地生成的二维码';
            caption.style.textAlign = 'center';
            caption.style.margin = '10px 0 0 0';
            caption.style.fontSize = '14px';
            caption.style.color = '#6b7280';
            container.appendChild(caption);

            if (callback) callback(null);

        } catch (error) {
            console.error('本地QR码生成失败:', error);
            this.showFallbackText(container, text);
            if (callback) callback(error);
        }
    },

    generateQRCode: function(text) {
        // 简化的QR码数据生成
        // 这里使用一个基本的QR码模式
        const size = 25; // 25x25 模块
        const matrix = Array(size).fill().map(() => Array(size).fill(false));

        // 添加定位标记
        this.addFinderPattern(matrix, 0, 0);
        this.addFinderPattern(matrix, size - 7, 0);
        this.addFinderPattern(matrix, 0, size - 7);

        // 添加分隔符
        this.addSeparators(matrix, size);

        // 添加时序图案
        this.addTimingPatterns(matrix, size);

        // 添加数据（基于文本内容的简化编码）
        this.addDataModules(matrix, text, size);

        return matrix;
    },

    renderQRCode: function(canvas, matrix, options) {
        const size = options?.width || 200;
        const moduleCount = matrix.length;
        const moduleSize = Math.floor(size / moduleCount);
        const actualSize = moduleSize * moduleCount;

        canvas.width = actualSize;
        canvas.height = actualSize;

        const ctx = canvas.getContext('2d');

        // 清空背景
        ctx.fillStyle = options?.color?.light || '#ffffff';
        ctx.fillRect(0, 0, actualSize, actualSize);

        // 绘制模块
        ctx.fillStyle = options?.color?.dark || '#000000';

        for (let row = 0; row < moduleCount; row++) {
            for (let col = 0; col < moduleCount; col++) {
                if (matrix[row][col]) {
                    ctx.fillRect(
                        col * moduleSize,
                        row * moduleSize,
                        moduleSize,
                        moduleSize
                    );
                }
            }
        }
    },
    
    addFinderPattern: function(matrix, startRow, startCol) {
        // 添加7x7的定位标记
        for (let row = 0; row < 7; row++) {
            for (let col = 0; col < 7; col++) {
                const r = startRow + row;
                const c = startCol + col;
                if (r < matrix.length && c < matrix[0].length) {
                    // 外框
                    if (row === 0 || row === 6 || col === 0 || col === 6) {
                        matrix[r][c] = true;
                    }
                    // 内部3x3方块
                    else if (row >= 2 && row <= 4 && col >= 2 && col <= 4) {
                        matrix[r][c] = true;
                    }
                    // 中间留白
                    else {
                        matrix[r][c] = false;
                    }
                }
            }
        }
    },

    addSeparators: function(matrix, size) {
        // 在定位标记周围添加分隔符（白色边框）
        const positions = [
            [0, 0], [size - 7, 0], [0, size - 7]
        ];

        positions.forEach(([startRow, startCol]) => {
            for (let row = -1; row <= 7; row++) {
                for (let col = -1; col <= 7; col++) {
                    const r = startRow + row;
                    const c = startCol + col;
                    if (r >= 0 && r < size && c >= 0 && c < size) {
                        if (row === -1 || row === 7 || col === -1 || col === 7) {
                            matrix[r][c] = false;
                        }
                    }
                }
            }
        });
    },

    addTimingPatterns: function(matrix, size) {
        // 添加时序图案（第6行和第6列的交替模式）
        for (let i = 8; i < size - 8; i++) {
            matrix[6][i] = (i % 2 === 0);
            matrix[i][6] = (i % 2 === 0);
        }
    },

    addDataModules: function(matrix, text, size) {
        // 基于文本内容生成数据模块
        const hash = this.simpleHash(text);
        let dataIndex = 0;

        // 从右下角开始，按照QR码的数据填充模式
        for (let col = size - 1; col > 0; col -= 2) {
            if (col === 6) col--; // 跳过时序列

            for (let row = 0; row < size; row++) {
                for (let c = 0; c < 2; c++) {
                    const currentCol = col - c;
                    const currentRow = (col % 4 < 2) ? (size - 1 - row) : row;

                    if (currentRow >= 0 && currentRow < size &&
                        currentCol >= 0 && currentCol < size &&
                        !this.isReservedModule(matrix, currentRow, currentCol, size)) {

                        // 基于hash和位置生成数据
                        const bit = ((hash >> (dataIndex % 32)) & 1) === 1;
                        matrix[currentRow][currentCol] = bit;
                        dataIndex++;
                    }
                }
            }
        }
    },

    isReservedModule: function(matrix, row, col, size) {
        // 检查是否是保留模块（定位标记、分隔符、时序图案等）

        // 定位标记区域
        if ((row < 9 && col < 9) ||
            (row < 9 && col >= size - 8) ||
            (row >= size - 8 && col < 9)) {
            return true;
        }

        // 时序图案
        if (row === 6 || col === 6) {
            return true;
        }

        return false;
    },

    simpleHash: function(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            const char = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash;
        }
        return Math.abs(hash);
    },
    
    showFallbackText: function(container, text) {
        // 降级方案：显示手动输入界面
        console.log('显示降级方案');

        // 提取密钥
        const secretMatch = text.match(/secret=([A-Z2-7]+)/);
        const secret = secretMatch ? secretMatch[1] : 'UNKNOWN';

        container.innerHTML = `
            <div style="border: 2px dashed #e5e7eb; padding: 20px; text-align: center; border-radius: 8px; background: #f9fafb;">
                <div style="margin-bottom: 15px;">
                    <i class="fas fa-mobile-alt" style="font-size: 48px; color: #6b7280;"></i>
                </div>
                <h6 style="margin: 0 0 15px 0; color: #374151;">手动添加到Google Authenticator</h6>

                <div style="background: #ffffff; border: 1px solid #d1d5db; padding: 15px; border-radius: 6px; margin: 15px 0; text-align: left;">
                    <div style="margin-bottom: 10px;">
                        <strong>账户名称：</strong> PGS Tracking System
                    </div>
                    <div style="margin-bottom: 10px;">
                        <strong>发行者：</strong> PGS Admin
                    </div>
                    <div style="margin-bottom: 10px;">
                        <strong>密钥：</strong>
                        <div style="background: #f3f4f6; padding: 8px; border-radius: 4px; font-family: monospace; word-break: break-all; margin-top: 5px; position: relative;">
                            ${secret}
                            <button onclick="copyToClipboard('${secret}')" style="position: absolute; top: 2px; right: 2px; background: #2563eb; color: white; border: none; padding: 4px 8px; border-radius: 3px; font-size: 11px; cursor: pointer;">
                                复制
                            </button>
                        </div>
                    </div>
                    <div>
                        <strong>类型：</strong> 基于时间
                    </div>
                </div>

                <div style="font-size: 12px; color: #6b7280; line-height: 1.4;">
                    <p style="margin: 0;">在Google Authenticator中：</p>
                    <p style="margin: 5px 0 0 0;">点击"+" → "手动输入密钥" → 输入上方信息</p>
                </div>
            </div>
        `;
    }
};

// 全局复制函数
window.copyToClipboard = function(text) {
    if (navigator.clipboard) {
        navigator.clipboard.writeText(text).then(() => {
            alert('密钥已复制到剪贴板');
        }).catch(() => {
            prompt('请手动复制密钥:', text);
        });
    } else {
        prompt('请手动复制密钥:', text);
    }
};
